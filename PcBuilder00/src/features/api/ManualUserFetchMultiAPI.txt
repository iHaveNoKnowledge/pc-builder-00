ใน @reduxjs/toolkit/query/react, เพื่อดึงข้อมูลจากหลาย API พร้อมกัน คุณสามารถใช้ createApi function เพื่อสร้าง instance ของ API สำหรับแต่ละ API ที่คุณต้องการใช้งาน 
ตัวอย่างการสร้าง API instance สองตัวอย่างสำหรับ API ที่เรียกว่า "users" และ "posts" ด้วย @reduxjs/toolkit/query/react:

```jsx
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';

// สร้าง API instance สำหรับ "users" API
const usersApi = createApi({
  reducerPath: 'usersApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://api.example.com/users' }),
  endpoints: (builder) => ({
    getUsers: builder.query({
      query: () => '/',
    }),
    getUserById: builder.query({
      query: (id) => `/${id}`,
    }),
  }),
});

// สร้าง API instance สำหรับ "posts" API
const postsApi = createApi({
  reducerPath: 'postsApi',
  baseQuery: fetchBaseQuery({ baseUrl: 'https://api.example.com/posts' }),
  endpoints: (builder) => ({
    getPosts: builder.query({
      query: () => '/',
    }),
    getPostById: builder.query({
      query: (id) => `/${id}`,
    }),
  }),
});

// สร้าง API instances สำหรับทุก API ที่คุณต้องการ
const api = {
  users: usersApi,
  posts: postsApi,
};

// เพื่อให้สามารถเรียกใช้ API ได้ทุกที่ในแอปพลิเคชันของคุณ
export const { useGetUsersQuery, useGetUserByIdQuery } = usersApi;
export const { useGetPostsQuery, useGetPostByIdQuery } = postsApi;

export default api;
```

เมื่อคุณสร้าง instances ของ API เพื่อแทนแต่ละ API ที่คุณต้องการใช้งาน คุณสามารถเรียกใช้งาน endpoints ของแต่ละ API ด้วย hooks เช่น `useGetUsersQuery`, `useGetPostsQuery` เป็นต้น 
และสามารถเรียกใช้งานได้ทุกที่ในแอปพลิเคชันของคุณ โดย import จาก API instances ที่คุณได้สร้างไว้.